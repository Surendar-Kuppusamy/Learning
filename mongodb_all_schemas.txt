SiteSchema                    =        Sites
UserSchema                    =        Users
OauthUserSchema                =        OauthUsers
LoggedDetailSchema            =        LoggedDetails
AssetSchema                    =        Assets
RoomSchema                    =        Rooms
ImageSchema                    =        Images
CitySchema                    =        Cities
StateSchema                    =        States
AssetLikeDislikeSchema        =        AssetLikeDislikes
AssetCommentSchema            =        AssetComments
ProposalSchema                =        Proposals
RoomTypeSchema                =        RoomTypes
TypeOfAssetSchema            =        TypeOfAssets
WhoCanContactUsSchema        =        WhoCanContactUs
AssetWhoCanContactSchema    =        AssetWhoCanContacts
AssetAmenitiesSchema        =        AssetAmenities
AssetStatusNameSchema        =        AssetStatusNames
AmenitiesSchema                =        Amenities



#################################################################################################################################################################

SiteModel.js:
-------------

import mongoose from 'mongoose';

var Schema = mongoose.Schema;

const SiteSchema = new Schema({
    site_total_view_count: {
        type: Number,
        trim: true,
        required: [true, 'Total count required.']
    },
    ip: {
        type: String,
        trim: true,
        required: [true, 'IP address required.']
    },
    browser: {
        type: String,
        trim: true,
        required: [true, 'Browser required.']
    },
    created_on: {
        type: Date,
        default: Date.now
    }
});

module.exports = mongoose.model("Sites", SiteSchema);

#################################################################################################################################################################

UserModel.js
--------

import mongoose from 'mongoose';

var Schema = mongoose.Schema;

const UserSchema = new Schema({
    first_name:  {
        type: String,
        trim: true,
        required: [true, 'First Name required.'],
        minLength: [3, 'First Name must have minimum 3 characters.'],
        maxLength: [30, 'Maximum character for first name should be 30 characters.']
    },
    last_name:  {
        type: String,
        trim: true,
        required: [true, 'Last Name required.'],
        minLength: [3, 'Last Name must have minimum 3 characters.'],
        maxLength: [30, 'Maximum character for last name should be 30 characters.']
    },
    dob:  {
        type: Date,
        trim: true,
        required: [true, 'Date of birth required.']
    },
    email:  {
        type: String,
        trim: true,
        unique: true,
        required: [true, 'Email required.'],
        validate: {
            validator: function(value) {
                return new Promise((resolve, reject) => {
                    const email_pattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                    resolve(email_pattern.test(value));
                });
            },
            message: props => `${props.value} is not a valid emial!`
        }
    },
    password:  {
        type: String,
        trim: true,
        required: [true, 'Password required.']
    },
    mobile_number:  {
        type: Number,
        trim: true,
        required: [true, 'Mobile number required.'],
        validate: {
            validator: function(value) {
                return new Promise((resolve, reject) => {
                    if(value.toString().length != 10) {
                        resolve(false);
                    } else {
                        resolve(true);
                    }
                });
            },
            message: 'Mobile number must be 10 digits'
        }
    },
    telephone_number:  {
        type: String,
        trim: true,
        validate: {
            validator: function(value) {
                return new Promise((resolve, reject) => {
                    const phone_pattern = /(?:\d{3}(?:\s|-)*\d{7})$/;
                    resolve(phone_pattern.test(value));
                });
            },
            message: 'Invalid telephone number.'
        }
    },
    address: {
        type: String,
        trim: true,
        required: [true, 'Address is required.']
    },
	profile_image: {
        type: String,
        trim: true
    },
    user_type: {        //user_type(1 - Admin, 2 - house owner, 3 - tenant)
        type: Number,
        required: [true, 'User type required.'],
        enum: {
            values: [1, 2, 3],
            message: '{VALUE} is invalid type.'
        }
    },
    user_status: {        //user_status (1 - active, 0 - disabled)
        type: Number,
        required: [true, 'User status required.'],
        enum: {
            values: [1, 2],
            message: '{VALUE} is invalid status.'
        }
    },
    created_on: {
        type: Date,
        default: Date.now
    },
    modified_on: {
        type: Date,
        default: Date.now
    }
})

module.exports = mongoose.model("Users", UserSchema);

#################################################################################################################################################################


OauthUserModel.js
------------------

import mongoose from 'mongoose';

var Schema = mongoose.Schema;

const OauthUserSchema = new Schema({
    first_name:  {
        type: String,
        trim: true
    },
    last_name:  {
        type: String,
        trim: true
    },
    dob:  {
        type: Date,
        trim: true
    },
    email:  {
        type: String,
        trim: true,
        unique: true,
        validate: {
            validator: function(value) {
                return new Promise((resolve, reject) => {
                    const email_pattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                    resolve(email_pattern.test(value));
                });
            },
            message: props => `${props.value} is not a valid emial!`
        }
    },
    password:  {
        type: String,
        trim: true
    },
    mobile_number:  {
        type: Number,
        trim: true
    },
    telephone_number:  {
        type: String,
        trim: true
    },
    address: {
        type: String,
        trim: true
    },
	profile_image: {
        type: String,
        trim: true
    },
    user_type: {        //user_type(1 - Admin, 2 - house owner, 3 - tenant)
        type: Number,
        required: [true, 'User type required.'],
        enum: {
            values: [1, 2, 3],
            message: '{VALUE} is invalid type.'
        }
    },
    user_status: {        //user_status (1 - active, 0 - disabled)
        type: Number,
        required: [true, 'User status required.'],
        enum: {
            values: [1, 2],
            message: '{VALUE} is invalid status.'
        }
    },
    created_on: {
        type: Date,
        default: Date.now
    },
    modified_on: {
        type: Date,
        default: Date.now
    }
})


module.exports = mongoose.model("OauthUsers", OauthUserSchema);

#################################################################################################################################################################

LoggedDetailModel.js
--------------------

import mongoose from 'mongoose';

var Schema = mongoose.Schema;

const LoggedDetailSchema = new Schema({
    user_id: {
        type: 'ObjectId',
        required: [true, "User ID is required"],
        ref: 'Users'
    },
    ip: {
        type: String,
        trim: true,
        required: [true, "IP address is required"]
    },
    browser: {
        type: String,
        trim: true,
        required: [true, "Browser data is required"]
    },
    logged_via: {        //logged_via(1 - site, 2 - Oauth)
        type: String,
        required: [true, 'Logged type is required.'],
        enum: {
            values: ["Site", "Oauth"],
            message: '{VALUE} is invalid logged type.'
        }
    },
    logged_on: {
        type: Date,
        default: Date.now
    }
});

module.exports = mongoose.model("LoggedDetails", LoggedDetailSchema);


#################################################################################################################################################################


AssetModel.js
-------------

import mongoose from 'mongoose';

var Schema = mongoose.Schema;

const AssetSchema = new Schema({
    user_id: {
        type: 'ObjectId',
        required: [true, "User ID is required"],
        ref: 'Users'
    },
    type_of_asset: {        //type_of_asset(1 - House, 2 - Appartment, 3 - Store, 4 - Koddon, 5 - Land)
        type: INT,
        required: [true, 'Asset type required.'],
        ref: 'TypeOfAssets'
    },
    asset_for: {        //asset_for(1 - Rent, 2 - for lease, 3 - "Sale")
        type: String,
        required: [true, 'Asset for required.'],
        enum: {
            values: ["Rent", "Lease", "Sale"],
            message: '{VALUE} is invalid asset for.'
        }
    },
    asset_name: {
        type: String,
        trim: true,
        required: [true, 'Asset name required.'],
        minLength: [3, 'Asset name must have minimum 3 characters.'],
        maxLength: [30, 'Maximum character for asset name should be 30 characters.']
    },
    door_number: {
        type: Number,
        trim: true
    },
    address_hint: {
        type: String,
        trim: true
    },
    street: {
        type: String,
        trim: true
    },
    nagar: {
        type: String,
        trim: true
    },
    city: {
        type: Number,
        trim: true,
        ref: 'Cities'
    },
    pincode: {
        type: Number,
        trim: true
    },
    state: {
        type: Number,
        trim: true,
        ref: 'States'
    },
    landmark: {
        type: String,
        trim: true
    },
    age_of_asset: {
        type: Number,
        trim: true,
        required: [true, 'Asset age is required.'],
    },
    age_of_asset_type: {
        type: String,
        trim: true,
        required: [true, 'Asset age type is required.'],
    },
    asset_main_image: {
        type: String,
        trim: true
    },
    asset_size_in_length: {
        type: Number,
        trim: true
    },
    asset_size_in_length_type: {
        type: String,
        trim: true
    },
    asset_size_in_width: {
        type: Number,
        trim: true
    },
    asset_size_in_width_type: {
        type: String,
        trim: true
    },
    advance_amount_for_asset: {
        type: Number,
        trim: true
    },
    monthly_rent_for_asset: {
        type: Number,
        trim: true
    },
    lease_amount_for_asset: {
        type: Number,
        trim: true
    },
    lease_period_for_asset: {
        type: Number,
        trim: true
    },
    lease_period_for_asset_type: {
        type: String,
        trim: true
    },
    asset_price: {
        type: Number,
        trim: true
    },
    asset_notes_by_owner: {
        type: String,
        trim: true
    },
    who_can_contact: {        //who_can_contact(1 - bachelor 2 - Family 3 - Anyone)
        type: [
                {
                    type: Number,
                    ref: 'AssetWhoCanContacts'
                }
            ],
        validate: {
            validator: function(value) {
                return new Promise((resolve, reject) => {
                    if(value.length == 0) {
                        resolve(false);
                    }
                    resolve(true);
                });
            },
            message: 'Select anyone of the tenant type'
        }
    },
    asset_amenities: {
        type: [
                {
                    type: Number,
                    ref: 'Amenities'
                }
            ],
        validate: {
            validator: function(value) {
                return new Promise((resolve, reject) => {
                    if(value.length == 0) {
                        resolve(false);
                    }
                    resolve(true);
                });
            },
            message: 'Select anyone of the amenities'
        }
    },
    asset_available_on_from: {
        type: Date,
        trim: true,
        required: [true, 'Asset available on date required.']
    },
    notice_period_for_vocate_asset: {
        type: String,
        trim: true
    },
    asset_status_now: {            //asset_status_now (1 - free(available), 2 - booked(unavailable), 3 - tenant_on_notice_period(tentant on his notice period)),
        type: String,
        trim: true,
        required: [true, 'Asset status is required.']
    },
    show_my_asset_for_tenants: {        //show_my_asset_for_tenants (1- Show, 2-Hide),
        type: String,
        required: [true, 'Tenant show status is required.'],
        enum: {
            values: ["Show", "Hide"],
            message: '{VALUE} is invalid value for tenant show status.'
        }
    },
    number_of_rooms: {
        type: Number,
        trim: true
    },
    bhk: {
        type: Number,
        trim: true
    },
    created_by: {
        type: 'ObjectId',
        required: [true, "User ID is required"],
        ref: 'Users'
    },
    modified_by: {
        type: 'ObjectId',
        required: [true, "User ID is required"],
        ref: 'Users'
    },
    created_on: {
        type: Date,
        default: Date.now
    },
    modified_on: {
        type: Date,
        default: Date.now
    }
});

module.exports = mongoose.model("Assets", AssetSchema);


#################################################################################################################################################################


RoomModel.js
-------------

import mongoose from 'mongoose';

var Schema = mongoose.Schema;

const RoomSchema = new Schema({
    asset_id: {
        type: 'ObjectId',
        required: [true, "Asset ID is required."],
        ref: 'Assets'
    },
    room_type: {
        type: 'ObjectId',
        required: [true, "Room type is required."],
        ref: 'RoomTypes'
    },
    room_size_in_length: {
        type: Number,
        trim: true
    },
    room_size_in_length_type: {
        type: String,
        trim: true
    },
    room_size_in_width: {
        type: Number,
        trim: true
    },
    room_size_in_width_type: {
        type: String,
        trim: true
    },
    room_image: {
        type: String,
        trim: true
    },
    created_by: {
        type: 'ObjectId',
        required: [true, "User ID is required."],
        ref: 'Users'
    },
    modified_by: {
        type: 'ObjectId',
        required: [true, "User ID is required"],
        ref: 'Users'
    },
    created_on: {
        type: Date,
        default: Date.now
    },
    modified_on: {
        type: Date,
        default: Date.now
    }
});

module.exports = mongoose.model("Rooms", RoomSchema);


#################################################################################################################################################################


AssetImageModel.js
-------------

import mongoose from 'mongoose';
const fs = require('fs');

var Schema = mongoose.Schema;

const AssetImageSchema = new Schema({
    asset_id: {
        type: 'ObjectId',
        required: [true, "Asset ID is required."],
        ref: 'Assets'
    },
    image: {
        type: String,
        trim: true,
        required: [true, "Image required."],
        validate: {
            validator: function(value) {
                return new Promise((resolve, reject) => {
                    fs.access(path, fs.F_OK, (err) => {
                      if (err) {
                        console.error(err);
                        resolve(false);
                      }
                      resolve(true);
                    })
                });
            },
            message: 'Image is not exists.'
        }
    },
    created_by: {
        type: 'ObjectId',
        required: [true, "User ID is required."],
        ref: 'Users'
    },
    created_on: {
        type: Date,
        default: Date.now
    }
});

module.exports = mongoose.model("AssetImages", AssetImageSchema);


#################################################################################################################################################################



RoomImageModel.js
-------------

import mongoose from 'mongoose';
const fs = require('fs');

var Schema = mongoose.Schema;

const RoomImageSchema = new Schema({
    room_id: {
        type: 'ObjectId',
        required: [true, "Room ID is required."],
        ref: 'Rooms'
    },
    image: {
        type: String,
        trim: true,
        required: [true, "Image required."],
        validate: {
            validator: function(value) {
                return new Promise((resolve, reject) => {
                    fs.access(path, fs.F_OK, (err) => {
                      if (err) {
                        console.error(err);
                        resolve(false);
                      }
                      resolve(true);
                    })
                });
            },
            message: 'Image is not exists.'
        }
    },
    created_by: {
        type: 'ObjectId',
        required: [true, "User ID is required."],
        ref: 'Users'
    },
    created_on: {
        type: Date,
        default: Date.now
    }
});

module.exports = mongoose.model("RoomImages", RoomImageSchema);

#################################################################################################################################################################

CityModel.js
-------------

import mongoose from 'mongoose';
const fs = require('fs');

var Schema = mongoose.Schema;

const CitySchema = new Schema({
    city_name: {
        type: String,
        trim: true,
        required: [true, 'City name required.'],
        minLength: [3, 'City name must have minimum 3 characters.'],
        maxLength: [100, 'Maximum character for city name should be 100 characters.']
    },
    created_by: {
        type: 'ObjectId',
        required: [true, "User ID is required."],
        ref: 'Users'
    },
    modified_by: {
        type: 'ObjectId',
        required: [true, "User ID is required"],
        ref: 'Users'
    },
    created_on: {
        type: Date,
        default: Date.now
    },
    modified_on: {
        type: Date,
        default: Date.now
    }
});

module.exports = mongoose.model("Cities", CitySchema);


#################################################################################################################################################################

StateModel.js
-------------

import mongoose from 'mongoose';
const fs = require('fs');

var Schema = mongoose.Schema;

const StateSchema = new Schema({
    state_name: {
        type: String,
        trim: true,
        required: [true, 'State name required.'],
        minLength: [3, 'State name must have minimum 3 characters.'],
        maxLength: [100, 'Maximum character for state name should be 100 characters.']
    },
    created_by: {
        type: 'ObjectId',
        required: [true, "User ID is required."],
        ref: 'Users'
    },
    modified_by: {
        type: 'ObjectId',
        required: [true, "User ID is required"],
        ref: 'Users'
    },
    created_on: {
        type: Date,
        default: Date.now
    },
    modified_on: {
        type: Date,
        default: Date.now
    }
});

module.exports = mongoose.model("States", StateSchema);


#################################################################################################################################################################

AssetLikeDislikeModel.js
------------------------

import mongoose from 'mongoose';
const fs = require('fs');

var Schema = mongoose.Schema;

const AssetLikeDislikeSchema = new Schema({
    asset_id: {
        type: 'ObjectId',
        required: [true, "Asset ID is required."],
        ref: 'Assets'
    },
    like_or_dislike: {    //like_or_dislike (1 - Like, 2- Dislike)
        type: String,
        required: [true, 'Like or dislike is required.'],
        enum: {
            values: ["Like", "Dislike"],
            message: '{VALUE} is invalid value for like or dislike.'
        }
    },
    user_id: {
        type: 'ObjectId',
        required: [true, "User ID is required."],
        ref: 'Users'
    },
    action_on: {
        type: Date,
        default: Date.now
    }
});

module.exports = mongoose.model("AssetLikeDislikes", AssetLikeDislikeSchema);


#################################################################################################################################################################


AssetCommentModel.js
--------------------

import mongoose from 'mongoose';
const fs = require('fs');

var Schema = mongoose.Schema;

const AssetCommentSchema = new Schema({
    asset_id: {
        type: 'ObjectId',
        required: [true, "Asset ID is required."],
        ref: 'Assets'
    },
    comments: {    
        type: String,
        trim: true,
        required: [true, 'Comment is required.'],
        
    },
    user_id: {
        type: 'ObjectId',
        required: [true, "User ID is required."],
        ref: 'Users'
    },
    action_on: {
        type: Date,
        default: Date.now
    }
});

module.exports = mongoose.model("AssetComments", AssetCommentSchema);


#################################################################################################################################################################

ProposalModel.js
----------------

import mongoose from 'mongoose';
const fs = require('fs');

var Schema = mongoose.Schema;

const ProposalSchema = new Schema({
    from_user_id: {
        type: 'ObjectId',
        required: [true, "User ID is required."],
        ref: 'Users'
    },
    to_user_id: {
        type: 'ObjectId',
        required: [true, "User ID is required."],
        ref: 'Users'
    },
    asset_id: {
        type: 'ObjectId',
        required: [true, "Asset ID is required."],
        ref: 'Assets'
    },
    is_proposal_cancelled: {    //cancel_proposal (1 - Not Cancelled, 2 - Cancelled)
        type: String,
        default: "Not Cancelled",
        enum: {
            values: ["Not Cancelled", "Cancelled"],
            message: '{VALUE} is invalid value for cancel proposal.'
        }
    },
    proposal_on: {
        type: Date,
        default: Date.now
    }
});


module.exports = mongoose.model("Proposals", ProposalSchema);

#################################################################################################################################################################

RoomTypeModel.js
----------------

import mongoose from 'mongoose';
const fs = require('fs');

var Schema = mongoose.Schema;

const RoomTypeSchema = new Schema({
    type: {
        type: String,
        trim: true,
        required: [true, 'Room type is required.'],
        minLength: [3, 'Room type must have minimum 3 characters.'],
        maxLength: [100, 'Maximum character for room type should be 100 characters.']
    },
    created_by: {
        type: 'ObjectId',
        required: [true, "User ID is required."],
        ref: 'Users'
    },
    modified_by: {
        type: 'ObjectId',
        required: [true, "User ID is required"],
        ref: 'Users'
    },
    created_on: {
        type: Date,
        default: Date.now
    },
    modified_on: {
        type: Date,
        default: Date.now
    }
});

module.exports = mongoose.model("RoomTypes", RoomTypeSchema);

#################################################################################################################################################################

TypeOfAssetModel.js
-------------------

import mongoose from 'mongoose';
const fs = require('fs');

var Schema = mongoose.Schema;

const TypeOfAssetSchema = new Schema({
    asset_type: {
        type: String,
        trim: true,
        required: [true, 'Asset type is required.'],
        minLength: [3, 'Asset type must have minimum 3 characters.'],
        maxLength: [100, 'Maximum character for asset type should be 100 characters.']
    },
    created_by: {
        type: 'ObjectId',
        required: [true, "User ID is required."],
        ref: 'Users'
    },
    modified_by: {
        type: 'ObjectId',
        required: [true, "User ID is required"],
        ref: 'Users'
    },
    created_on: {
        type: Date,
        default: Date.now
    },
    modified_on: {
        type: Date,
        default: Date.now
    }
});

module.exports = mongoose.model("TypeOfAssets", TypeOfAssetSchema);

#################################################################################################################################################################


WhoCanContactUsModel.js
-----------------------

import mongoose from 'mongoose';
const fs = require('fs');

var Schema = mongoose.Schema;


const WhoCanContactUsSchema = new Schema({
    tenant_type: {
        type: String,
        trim: true,
        required: [true, 'Tenant type is required.'],
        minLength: [3, 'Tenant type must have minimum 3 characters.'],
        maxLength: [100, 'Maximum character for tenant type should be 100 characters.']
    },
    created_by: {
        type: 'ObjectId',
        required: [true, "User ID is required."],
        ref: 'Users'
    },
    modified_by: {
        type: 'ObjectId',
        required: [true, "User ID is required"],
        ref: 'Users'
    },
    created_on: {
        type: Date,
        default: Date.now
    },
    modified_on: {
        type: Date,
        default: Date.now
    }
});


module.exports = mongoose.model("WhoCanContactUs", WhoCanContactUsSchema);


#################################################################################################################################################################

AssetWhoCanContactModel.js
--------------------------

import mongoose from 'mongoose';
const fs = require('fs');

var Schema = mongoose.Schema;

const AssetWhoCanContactSchema = new Schema({
    asset_id: {
        type: 'ObjectId',
        required: [true, "Asset ID is required."],
        ref: 'Assets'
    },
    who_can_contact_us_id: {
        type: 'ObjectId',
        required: [true, "Type of tenant ID is required."],
        ref: 'WhoCanContactUs'
    },
    added_by: {
        type: 'ObjectId',
        required: [true, "User ID is required."],
        ref: 'Users'
    },
    added_on: {
        type: Date,
        default: Date.now
    }
});

module.exports = mongoose.model("AssetWhoCanContacts", AssetWhoCanContactSchema);


################################################################################################################################################################

AssetAmenitiesModel.js
----------------------

import mongoose from 'mongoose';
const fs = require('fs');

var Schema = mongoose.Schema;

const AssetAmenitiesSchema = new Schema({
    asset_id: {
        type: 'ObjectId',
        required: [true, "Asset ID is required."],
        ref: 'Assets'
    },
    amenities_id: {
        type: 'ObjectId',
        required: [true, "Type of amenities ID is required."],
        ref: 'Amenities'
    },
    added_by: {
        type: 'ObjectId',
        required: [true, "User ID is required."],
        ref: 'Users'
    },
    added_on: {
        type: Date,
        default: Date.now
    }
});


module.exports = mongoose.model("AssetAmenities", AssetAmenitiesSchema);

################################################################################################################################################################

AssetStatusNameModel.js
-----------------------

import mongoose from 'mongoose';
const fs = require('fs');

var Schema = mongoose.Schema;

const AssetStatusNameSchema = new Schema({
    status_name: {
        type: String,
        trim: true,
        required: [true, 'Tenant type is required.'],
        minLength: [3, 'Tenant type must have minimum 3 characters.'],
        maxLength: [100, 'Maximum character for tenant type should be 100 characters.']
    },
    created_by: {
        type: 'ObjectId',
        required: [true, "User ID is required."],
        ref: 'Users'
    },
    modified_by: {
        type: 'ObjectId',
        required: [true, "User ID is required"],
        ref: 'Users'
    },
    created_on: {
        type: Date,
        default: Date.now
    },
    modified_on: {
        type: Date,
        default: Date.now
    }
});


module.exports = mongoose.model("AssetStatusNames", AssetStatusNameSchema);

################################################################################################################################################################

AmenitiesModel.js
-----------------------

import mongoose from 'mongoose';
const fs = require('fs');

var Schema = mongoose.Schema;

const AmenitiesSchema = new Schema({
    amenities: {
        type: String,
        trim: true,
        required: [true, 'Tenant type is required.'],
        minLength: [3, 'Tenant type must have minimum 3 characters.'],
        maxLength: [100, 'Maximum character for tenant type should be 100 characters.']
    },
    created_by: {
        type: 'ObjectId',
        required: [true, "User ID is required."],
        ref: 'Users'
    },
    modified_by: {
        type: 'ObjectId',
        required: [true, "User ID is required"],
        ref: 'Users'
    },
    created_on: {
        type: Date,
        default: Date.now
    },
    modified_on: {
        type: Date,
        default: Date.now
    }
});


module.exports = mongoose.model("Amenities", AmenitiesSchema);

################################################################################################################################################################